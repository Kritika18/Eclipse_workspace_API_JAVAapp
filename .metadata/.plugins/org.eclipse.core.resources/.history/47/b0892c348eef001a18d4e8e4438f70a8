package algo;

import java.util.LinkedList;
import java.util.Queue;
import java.util.*;

public class SumAtBothEnds {
	
	public static void main(String args[])
	{
	Integer[] arr = {2,3,4,5,1};
	
	
	SumAtBothEnds Obj = new SumAtBothEnds();
	Obj.findCombination(arr);
	
	}
	public void findCombination(Integer[] a)
	{
		int count=0;
		
		Queue<Integer> q = new LinkedList<Integer>();
		
	    Collections.addAll(q,a );
	    System.out.println(q);
	    int[] output = new int[12];
	    Map<Integer,Integer> m = new HashMap<Integer,Integer>();
	   ArrayList<Integer> oq = new ArrayList<Integer>();
		while(!q.isEmpty())
		{
	    int n = q.poll();
	    System.out.println(n);
	    count++; 
	    
	    for(int i = count ; i<a.length ; i++)
	    {
	    	
	    	output[i]= a[i];
	    	System.out.println("in for " +a[i]);
	    	
	    	int sum = n +a[i];
	    	int val = 0;
	    	if(count==1) 
	    	{
	    		oq.add(sum);
	    		oq.add(n);
	    		oq.add(a[i]);  // for adding first sums in queue .
	    	}
	    	if(!m.containsKey(sum))
	    	{
	    	m.put(sum,val);  //  
	    	
	    	}
	    	else
	    	{
	    		m.put(sum, m.get(sum)+1 );
	    		oq.add(sum);
	    		oq.add(n);
	    		oq.add(a[i]);
	    		
	    	}
	    	System.out.println("oq is" +oq);
	    }
	    
	    System.out.println("sum"+m);
	    
	   
		}
		System.out.println("oq is" +oq);
	
	int found =0;
	for (Map.Entry<Integer, Integer> entryinmap : m.entrySet()) 
	{
		
		if(entryinmap.getValue()>=1)
		{
			found = entryinmap.getKey();
			System.out.println("found sum is" +found);
			
			int index1 = oq.indexOf(found);
			System.out.println(index1);
			
		}
		
		
		
		
	}
	
	}

}
